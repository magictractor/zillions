/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/5.4.1/userguide/multi_project_builds.html
 */

rootProject.name = "zillions"

include("zillions-api")
include("zillions-junit")
include("zillions-env")
include("zillions-core")
include("zillions-testbed")
include("zillions-biginteger")
include("zillions-gmp")
include("zillions-semiprime")

// includeBuild causes IDEs to link projects
// See https://docs.gradle.org/current/userguide/composite_builds.html
// But it doesn't fall back to repo jar if project is closed...
// See https://github.com/eclipse/buildship/issues/690
// 
//includeBuild("zillions-suite")
//if( file('../other-project').exists) {

// Hmm. using includeBuild() changed Eclipse dependency to the suite project
// BUT undoing it retains the project dependency (should revert to the repo?)

// Perhaps use a marker file as suggested in
// https://proandroiddev.com/saying-goodbye-to-snapshots-with-gradles-composite-builds-bc98751392f6
// Also see https://github.com/gradle/gradle/issues/1792
//if( file(".marker").exists() ) {
    includeBuild("zillions-suite")
//}

// Trick copied from https://github.com/robfletcher/strikt/blob/master/settings.gradle.kts
// Explained at http://www.developerphil.com/renaming-your-gradle-build-files
rootProject.children.forEach {
  it.buildFileName = "${it.name}.gradle.kts"
}
