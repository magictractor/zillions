/**
 * Copyright 2015 Ken Dobson
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.co.magictractor.math.big.gmp.jna;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
import com.sun.jna.Structure.ByReference;
import com.sun.jna.ptr.NativeLongByReference;

/**
 * <i>native declaration : src\main\headers\gmp\gmp.h:15</i><br> This file was
 * autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br> a tool
 * written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource
 * projects.</a>.<br> For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
// March 2019 - I think I had stopped using JNAerator and just crafted required files
// manually.
public class mpz_t extends Structure implements ByReference
{
  /**
   * Number of *limbs* allocated and pointed<br> to by the _mp_d field.
   */
  public int _mp_alloc;
  /**
   * abs(_mp_size) is the number of limbs the<br> last field points to. If _mp_size is<br>
   * negative this is a negative number.
   */
  public int _mp_size;
  /**
   * Pointer to the limbs.<br> C type : mp_limb_t*
   */
  public NativeLongByReference _mp_d;

  // public long _mp_d;

  // public int tmp;

  public mpz_t() {
    // this(0,0,new NativeLongByReference());
  }

  @Override
  protected List<?> getFieldOrder() {
    return Arrays.asList("_mp_alloc", "_mp_size", "_mp_d");
  };

  // protected void initFieldOrder() {
  // setFieldOrder(new String[]{"_mp_alloc", "_mp_size", "_mp_d"});
  // }

  /**
   * @param _mp_alloc Number of *limbs* allocated and pointed<br> to by the _mp_d
   *          field.<br>
   * @param _mp_size abs(_mp_size) is the number of limbs the<br> last field points to. If
   *          _mp_size is<br> negative this is a negative number.<br>
   * @param _mp_d Pointer to the limbs.<br> C type : mp_limb_t*
   */
  /*
   * public mpz_struct(int _mp_alloc, int _mp_size, NativeLongByReference
   * _mp_d) { super(); this._mp_alloc = _mp_alloc; this._mp_size = _mp_size;
   * this._mp_d = _mp_d; }
   */

  /*
   * public static class ByReference extends __mpz_struct implements
   * Structure.ByReference {
   * 
   * }; public static class ByValue extends __mpz_struct implements
   * Structure.ByValue {
   * 
   * }
   */

  /*
   * public static void main(String[] args) { new GmpJnaInitStrategy();
   * 
   * System.out.println(new mpz_t().getFieldOrder());
   * 
   * //Structure t = new mpz_t(); //System.out.println(t.)
   * System.out.println("mpz_t.class size: " +
   * Native.getNativeSize(mpz_t.class)); //
   * System.out.println("mpz_struct.class size: " +
   * Native.getNativeSize(mpz_struct.class));
   * 
   * mpz_t t = new mpz_t(); System.out.println("mpz_t size: " + t.size());
   * GmpLib.INSTANCE.mpz_init(t);
   * 
   * //GmpLib.INSTANCE.__gmpz_init_set_si(t, new NativeLong(123L));
   * //GmpLib.INSTANCE.__gmpz_init_set_si(t, 456789);
   * GmpLib.INSTANCE.mpz_init_set_str(t, "1234567", 10);
   * 
   * 
   * String str = GmpLib.INSTANCE.mpz_get_str(null, 10, t);
   * System.out.println(">" + str);
   * 
   * //System.out.println(">" + GmpLib.INSTANCE.__gmpz_get_str(null, 16, t));
   * //System.out.println(">" + GmpLib.INSTANCE.__gmpz_get_str(null, 2, t));
   * 
   * //Memory mem = new Memory(16); //System.out.println(mem.dump());
   * //GmpLib.INSTANCE.__gmpz_get_str(mem, 10, t);
   * //System.out.println(mem.dump()); }
   */

}
